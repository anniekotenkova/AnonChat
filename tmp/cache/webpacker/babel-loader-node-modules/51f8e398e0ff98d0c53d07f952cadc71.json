{"ast":null,"code":"var _jsxFileName = \"/Users/kotya/SMBD3/app/javascript/chat/index.jsx\";\n// app/javascript/chat/index.jsx\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, combineReducers, applyMiddleware } from 'redux';\nimport logger from 'redux-logger';\nimport ReduxPromise from 'redux-promise';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport App from './components/app';\nimport messagesReducer from './reducers/messages_reducer';\nvar chatContainer = document.getElementById('chat_app');\nvar initialState = {\n  messages: [],\n  channels: ['general', 'react', 'dogs'] // TODO: get that from Rails DB.\n\n};\nvar reducers = combineReducers({\n  messages: messagesReducer,\n  channels: function channels() {\n    var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n    var action = arguments.length > 1 ? arguments[1] : undefined;\n    return state;\n  }\n});\nvar middlewares = applyMiddleware(logger, ReduxPromise);\nvar store = createStore(reducers, initialState, middlewares);\nReactDOM.render(React.createElement(Provider, {\n  store: store,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 29\n  },\n  __self: this\n}, React.createElement(BrowserRouter, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 30\n  },\n  __self: this\n}, React.createElement(Switch, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 31\n  },\n  __self: this\n}, React.createElement(Route, {\n  path: \"/channels/:channel\",\n  component: App,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 32\n  },\n  __self: this\n})))), chatContainer);","map":{"version":3,"sources":["/Users/kotya/SMBD3/app/javascript/chat/index.jsx"],"names":["React","ReactDOM","Provider","createStore","combineReducers","applyMiddleware","logger","ReduxPromise","BrowserRouter","Route","Switch","App","messagesReducer","chatContainer","document","getElementById","initialState","messages","channels","reducers","state","action","middlewares","store","render"],"mappings":";AAAA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,SAASC,QAAT,QAAyB,aAAzB;AACA,SAASC,WAAT,EAAsBC,eAAtB,EAAuCC,eAAvC,QAA8D,OAA9D;AACA,OAAOC,MAAP,MAAmB,cAAnB;AACA,OAAOC,YAAP,MAAyB,eAAzB;AACA,SAASC,aAAT,EAAwBC,KAAxB,EAA+BC,MAA/B,QAA6C,kBAA7C;AAEA,OAAOC,GAAP,MAAgB,kBAAhB;AACA,OAAOC,eAAP,MAA4B,6BAA5B;AAEA,IAAMC,aAAa,GAAGC,QAAQ,CAACC,cAAT,CAAwB,UAAxB,CAAtB;AAEA,IAAMC,YAAY,GAAG;AACnBC,EAAAA,QAAQ,EAAE,EADS;AAEnBC,EAAAA,QAAQ,EAAE,CAAE,SAAF,EAAa,OAAb,EAAsB,MAAtB,CAFS,CAEuB;;AAFvB,CAArB;AAKA,IAAMC,QAAQ,GAAGf,eAAe,CAAC;AAC/Ba,EAAAA,QAAQ,EAAEL,eADqB;AAE/BM,EAAAA,QAAQ,EAAE;AAAA,QAACE,KAAD,uEAAS,IAAT;AAAA,QAAeC,MAAf;AAAA,WAA0BD,KAA1B;AAAA;AAFqB,CAAD,CAAhC;AAKA,IAAME,WAAW,GAAGjB,eAAe,CAACC,MAAD,EAASC,YAAT,CAAnC;AACA,IAAMgB,KAAK,GAAGpB,WAAW,CAACgB,QAAD,EAAWH,YAAX,EAAyBM,WAAzB,CAAzB;AAEArB,QAAQ,CAACuB,MAAT,CACE,oBAAC,QAAD;AAAU,EAAA,KAAK,EAAED,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACE,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACE,oBAAC,KAAD;AAAO,EAAA,IAAI,EAAC,oBAAZ;AAAiC,EAAA,SAAS,EAAEZ,GAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EADF,CADF,CADF,CADF,EAQEE,aARF","sourcesContent":["// app/javascript/chat/index.jsx\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, combineReducers, applyMiddleware } from 'redux';\nimport logger from 'redux-logger'\nimport ReduxPromise from 'redux-promise';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\n\nimport App from './components/app';\nimport messagesReducer from './reducers/messages_reducer';\n\nconst chatContainer = document.getElementById('chat_app');\n\nconst initialState = {\n  messages: [],\n  channels: [ 'general', 'react', 'dogs' ], // TODO: get that from Rails DB.\n};\n\nconst reducers = combineReducers({\n  messages: messagesReducer,\n  channels: (state = null, action) => state\n});\n\nconst middlewares = applyMiddleware(logger, ReduxPromise);\nconst store = createStore(reducers, initialState, middlewares);\n\nReactDOM.render(\n  <Provider store={store}>\n    <BrowserRouter>\n      <Switch>\n        <Route path=\"/channels/:channel\" component={App} />\n      </Switch>\n    </BrowserRouter>\n  </Provider>,\n  chatContainer\n);\n"]},"metadata":{},"sourceType":"module"}