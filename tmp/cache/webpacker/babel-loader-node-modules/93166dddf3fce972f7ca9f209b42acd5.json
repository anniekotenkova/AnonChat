{"ast":null,"code":"var _jsxFileName = \"/Users/kotya/SMBD3/app/javascript/chat/containers/message_list.jsx\";\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (typeof call === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nimport React, { Component } from 'react';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport { fetchMessages } from '../actions';\nimport Message from '../components/message';\nimport MessageForm from '../containers/message_form';\nimport Countdown from 'react-countdown';\nimport { CountDown } from './countdown';\n\nvar MessageList =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(MessageList, _Component);\n\n  function MessageList() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, MessageList);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(MessageList)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.fetchMessages = function () {\n      _this.props.fetchMessages(_this.props.selectedChannel);\n    };\n\n    return _this;\n  }\n\n  _createClass(MessageList, [{\n    key: \"UNSAFE_componentWillMount\",\n    value: function UNSAFE_componentWillMount() {\n      this.fetchMessages();\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.refresher = setInterval(this.fetchMessages, 5000);\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      this.list.scrollTop = this.list.scrollHeight;\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      clearInterval(this.refresher);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(\"div\", {\n        className: \"channelContainer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"header\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"headerWidget\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42\n        },\n        __self: this\n      }, React.createElement(CountDown, {\n        minutes: 15,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"devider\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        type: \"submit\",\n        className: \"closeButton\",\n        href: \"#\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45\n        },\n        __self: this\n      }, \"\\u0417\\u0430\\u043A\\u043E\\u043D\\u0447\\u0438\\u0442\\u044C \\u0431\\u0435\\u0441\\u0435\\u0434\\u0443\", React.createElement(\"div\", {\n        className: \"iconButton\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      })))), React.createElement(\"div\", {\n        className: \"channel-content\",\n        ref: function ref(list) {\n          _this2.list = list;\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        },\n        __self: this\n      }, this.props.messages.map(function (message) {\n        return React.createElement(Message, {\n          key: message.id,\n          message: message,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 54\n          },\n          __self: this\n        });\n      })), React.createElement(MessageForm, {\n        selectedChannel: this.props.selectedChannel,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return MessageList;\n}(Component);\n\nfunction mapStateToProps(state) {\n  return {\n    messages: state.messages\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return bindActionCreators({\n    fetchMessages: fetchMessages\n  }, dispatch);\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MessageList);","map":{"version":3,"sources":["/Users/kotya/SMBD3/app/javascript/chat/containers/message_list.jsx"],"names":["React","Component","bindActionCreators","connect","fetchMessages","Message","MessageForm","Countdown","CountDown","MessageList","props","selectedChannel","refresher","setInterval","list","scrollTop","scrollHeight","clearInterval","messages","map","message","id","mapStateToProps","state","mapDispatchToProps","dispatch"],"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,kBAAT,QAAmC,OAAnC;AACA,SAASC,OAAT,QAAwB,aAAxB;AAEA,SAASC,aAAT,QAA8B,YAA9B;AACA,OAAOC,OAAP,MAAoB,uBAApB;AACA,OAAOC,WAAP,MAAwB,4BAAxB;AACA,OAAOC,SAAP,MAAsB,iBAAtB;AACA,SAASC,SAAT,QAA0B,aAA1B;;IAKMC,W;;;;;;;;;;;;;;;;;;UAiBJL,a,GAAgB,YAAM;AACpB,YAAKM,KAAL,CAAWN,aAAX,CAAyB,MAAKM,KAAL,CAAWC,eAApC;AACD,K;;;;;;;gDAlB2B;AAC1B,WAAKP,aAAL;AACD;;;wCAEmB;AAClB,WAAKQ,SAAL,GAAiBC,WAAW,CAAC,KAAKT,aAAN,EAAqB,IAArB,CAA5B;AACD;;;yCAEoB;AACnB,WAAKU,IAAL,CAAUC,SAAV,GAAsB,KAAKD,IAAL,CAAUE,YAAhC;AACD;;;2CAEsB;AACrBC,MAAAA,aAAa,CAAC,KAAKL,SAAN,CAAb;AACD;;;6BASS;AAAA;;AACR,aACE;AAAK,QAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAK,QAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAK,QAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,SAAD;AAAW,QAAA,OAAO,EAAE,EAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,EAEE;AAAK,QAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFF,EAGE;AAAQ,QAAA,IAAI,EAAC,QAAb;AAAsB,QAAA,SAAS,EAAC,aAAhC;AAA8C,QAAA,IAAI,EAAC,GAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wGACE;AAAK,QAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CAHF,CADF,CADF,EAWE;AAAK,QAAA,SAAS,EAAC,iBAAf;AAAiC,QAAA,GAAG,EAAE,aAACE,IAAD,EAAU;AAAE,UAAA,MAAI,CAACA,IAAL,GAAYA,IAAZ;AAAmB,SAArE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAEI,KAAKJ,KAAL,CAAWQ,QAAX,CAAoBC,GAApB,CAAwB,UAACC,OAAD,EAAa;AACnC,eAAO,oBAAC,OAAD;AAAS,UAAA,GAAG,EAAEA,OAAO,CAACC,EAAtB;AAA0B,UAAA,OAAO,EAAED,OAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,OAFD,CAFJ,CAXF,EAkBE,oBAAC,WAAD;AAAa,QAAA,eAAe,EAAE,KAAKV,KAAL,CAAWC,eAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAlBF,CADF;AAsBD;;;;EA/CuBV,S;;AAkD1B,SAASqB,eAAT,CAAyBC,KAAzB,EAAgC;AAC9B,SAAO;AACLL,IAAAA,QAAQ,EAAEK,KAAK,CAACL;AADX,GAAP;AAGD;;AAED,SAASM,kBAAT,CAA4BC,QAA5B,EAAsC;AACpC,SAAOvB,kBAAkB,CAAC;AAAEE,IAAAA,aAAa,EAAbA;AAAF,GAAD,EAAoBqB,QAApB,CAAzB;AACD;;AAED,eAAetB,OAAO,CAACmB,eAAD,EAAkBE,kBAAlB,CAAP,CAA6Cf,WAA7C,CAAf","sourcesContent":["import React, { Component } from 'react';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\n\nimport { fetchMessages } from '../actions';\nimport Message from '../components/message';\nimport MessageForm from '../containers/message_form';\nimport Countdown from 'react-countdown';\nimport { CountDown } from './countdown';\n\n\n\n\nclass MessageList extends Component {\n  UNSAFE_componentWillMount() {\n    this.fetchMessages();\n  }\n\n  componentDidMount() {\n    this.refresher = setInterval(this.fetchMessages, 5000);\n  }\n\n  componentDidUpdate() {\n    this.list.scrollTop = this.list.scrollHeight;\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.refresher);\n  }\n\n  fetchMessages = () => {\n    this.props.fetchMessages(this.props.selectedChannel);\n  }\n\n\n\n\n  render () {\n    return (\n      <div className=\"channelContainer\">\n        <div className=\"header\">\n          <div className=\"headerWidget\">\n            <CountDown minutes={15} />\n            <div className=\"devider\"></div>\n            <button type=\"submit\" className=\"closeButton\" href=\"#\">Закончить беседу\n              <div className=\"iconButton\"></div>\n            </button>\n          </div>\n        </div>\n\n        <div className=\"channel-content\" ref={(list) => { this.list = list; }}>\n          {\n            this.props.messages.map((message) => {\n              return <Message key={message.id} message={message} />;\n            })\n          }\n        </div>\n        <MessageForm selectedChannel={this.props.selectedChannel} />\n      </div>\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    messages: state.messages\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return bindActionCreators({ fetchMessages }, dispatch);\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MessageList);\n"]},"metadata":{},"sourceType":"module"}